import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8377374186:AAH9mLRNJxS6VjIvdWkxlFJkoRU5a0lEpSM"
CHANNEL_ID = -1001989783724  # –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
GROUP_INVITE_LINK = "https://t.me/+W60fzUwV7DE2YTZi"  # –í–∞—à–∞ –≥–æ—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, {user.first_name}...")

    try:
        bot = context.bot
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        chat_member = await bot.get_chat_member(CHANNEL_ID, user.id)
        
        if chat_member.status not in ["member", "administrator", "creator"]:
            await update.message.reply_text("‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            logger.info(f"–û—Ç–∫–∞–∑: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
            return

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É
        await bot.send_message(
            chat_id=user.id,
            text=f"‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç! –ñ–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É:\n\n{GROUP_INVITE_LINK}"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω—É.")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()